#!/usr/bin/env node
///////////////////////////////////////////////////////////////////////////////////
// todo winston
// todo nconf
///////////////////////////////////////////////////////////////////////////////////
// express MEAN_MVC_2 -e -s
////////////////////////////////////////////////////////////////////////////////////
//### code is based on the MEAN.JS framework ==> MEAN Web Development by Amos Haviv
//https://hackhands.com/delving-node-js-express-web-framework
////////////////////////////////////////////////////////////////////////////////////
// hier wird vorkonfigurierter app-Express-Application-Object geholt,
// gestartet. Erfolgsmeldung bzw. Error-log geschrieben...
////////////////////////////////////////////////////////////////////////////////////
/**
 * Module dependencies.
 */


// vorkonfigurierter Express-Application-Object holen
var app = require('../config/app');
//var app = require('../tmp/app_generated');


//debug infos ermoeglichen
var debug = require('debug')('MEAN_MVC_2:server');
//server erzeugen
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '1337');
app.set('port', port);
/**
 * Create HTTP server.
 */
var server = http.createServer(app);
/**
 *
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
//
console.log('Server running at http://localhost:' + port);
/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);
    if (isNaN(port)) {
        // named pipe
        return val;
    }
    if (port >= 0) {
        // port number
        return port;
    }
    return false;
}
/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}
/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

// Express-Application-Object "public" machen
module.exports = app;